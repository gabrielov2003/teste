
import json
from dataclasses import is_dataclass, asdict
from typing import Any


class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj: Any):
        if is_dataclass(obj):
            return asdict(obj)
        return str(obj)
import inspect
from dataclasses import dataclass
from functools import partial
from typing import Tuple, Callable, Optional, Union, Any
from pandas._typing import Axis


@dataclass(frozen=True)
class ApplyMapArgs:
    style_func: Callable
    subset: Optional[Any]

    @classmethod
    def from_tuple(cls, args: Tuple[Callable, Optional[Any]]):
        return cls(args[0], args[1])

    @staticmethod
    def copy_with(style_func: Callable, subset: Optional[Any]):
        return ApplyMapArgs(style_func, subset)

    def to_tuple(self) -> Tuple[Callable, Optional[Any]]:
        return self.style_func, self.subset


@dataclass(frozen=True)
class ApplyArgs:
    style_func: Callable
    axis: Optional[Axis]
    subset: Optional[Any]

    @classmethod
    def from_tuple(cls, args: Tuple[Callable, Optional[Axis], Optional[Any]]):
        return cls(args[0], args[1], args[2])

    def copy_with(self, style_func: Callable, subset: Optional[Any]):
        return ApplyArgs(style_func, self.axis, subset)

    def to_tuple(self) -> Tuple[Callable, Optional[Axis], Optional[Any]]:
        return self.style_func, self.axis, self.subset


@dataclass(frozen=True)
class StylerTodo:
    apply_func: Callable
    apply_args: Union[ApplyArgs, ApplyMapArgs]
    style_func_kwargs: dict

    @classmethod
    def from_tuple(cls, todo: Tuple[Callable, tuple, dict]):
        return cls(todo[0], cls._to_apply_args(todo), todo[2])

    def builder(self):
        return StylerTodoBuilder(self)

    @staticmethod
    def _to_apply_args(todo: Tuple[Callable, tuple, dict]):
        if StylerTodo.is_applymap_tuple(todo):
            return ApplyMapArgs.from_tuple(todo[1])
        else:
            return ApplyArgs.from_tuple(todo[1])

    @classmethod
    def is_applymap_tuple(cls, todo: Tuple[Callable, tuple, dict]):
        return cls.__is_apply_map_func(todo[0])

    def is_applymap(self) -> bool:
        return self.__is_apply_map_func(self.apply_func)

    @staticmethod
    def __is_apply_map_func(func: Callable) -> bool:
        return getattr(func, '__qualname__', '').startswith('Styler.applymap')

    def is_pandas_style_func(self) -> bool:
        func = self.apply_args.style_func
        if isinstance(func, partial):
            func = func.func
        inspect_result = inspect.getmodule(func)
        return False if inspect_result is None else inspect.getmodule(func).__name__ == 'pandas.io.formats.style'

    def should_provide_chunk_parent(self):
        sig = inspect.signature(self.apply_args.style_func)
        for param in sig.parameters.values():
            if param.name == "chunk_parent" or param.kind == inspect.Parameter.VAR_KEYWORD:
                return True
        return False

    def to_tuple(self) -> Tuple[Callable, tuple, dict]:
        return self.apply_func, self.apply_args.to_tuple(), self.style_func_kwargs


class StylerTodoBuilder:

    def __init__(self, source: StylerTodo):
        self.source: StylerTodo = source
        self.values: dict = {}

    def with_subset(self, subset: Optional[Any]):
        self.values["subset"] = subset
        return self

    def with_style_func(self, style_func: Callable):
        self.values["style_func"] = style_func
        return self

    def with_style_func_kwargs(self, style_func_kwargs: dict):
        self.values["style_func_kwargs"] = style_func_kwargs
        return self

    def build(self) -> StylerTodo:
        return StylerTodo(
            self.source.apply_func,
            self.source.apply_args.copy_with(
                style_func=self.values.get("style_func", self.source.apply_args.style_func),
                subset=self.values.get("subset", self.source.apply_args.subset),
            ),
            self.values.get("style_func_kwargs", self.source.style_func_kwargs),
        )

from functools import partial


class StyleFunctionNameResolver:

    @staticmethod
    def get_style_func_qname(todo: StylerTodo) -> str:
        func = todo.apply_args.style_func
        if isinstance(func, partial):
            func = func.func
        return getattr(func, '__qualname__', '')

    @staticmethod
    def resolve_style_func_name(todo: StylerTodo) -> str:
        qname = StyleFunctionNameResolver.get_style_func_qname(todo)
        if todo.is_pandas_style_func():
            if StyleFunctionNameResolver.is_pandas_background_gradient(qname):
                return "background_gradient"
            elif StyleFunctionNameResolver.is_pandas_highlight_max(qname, todo):
                return "highlight_max"
            elif StyleFunctionNameResolver.is_pandas_highlight_min(qname, todo):
                return "highlight_min"
            elif StyleFunctionNameResolver.is_pandas_highlight_null(qname):
                return "highlight_null"
            elif StyleFunctionNameResolver.is_pandas_set_properties(qname):
                return "set_properties"
            else:
                return qname.rpartition('.')[2]
        else:
            return qname.rpartition('.')[2]

    @staticmethod
    def is_pandas_background_gradient(style_func_qname: str) -> bool:
        return style_func_qname == 'Styler._background_gradient'

    @staticmethod
    def is_pandas_highlight_max(style_func_qname: str, todo: StylerTodo) -> bool:
        return style_func_qname.startswith('Styler._highlight_extrema') and todo.style_func_kwargs.get('max_', False)

    @staticmethod
    def is_pandas_highlight_min(style_func_qname: str, todo: StylerTodo) -> bool:
        return style_func_qname.startswith('Styler._highlight_extrema') and not todo.style_func_kwargs.get('max_', False)

    @staticmethod
    def is_pandas_highlight_null(style_func_qname: str) -> bool:
        return style_func_qname.startswith('Styler._highlight_null')

    @staticmethod
    def is_pandas_set_properties(style_func_qname: str) -> bool:
        return style_func_qname.startswith('Styler.set_properties')

from abc import ABC, abstractmethod
from typing import Optional, Any

from pandas import DataFrame
from pandas.core.indexing import non_reducing_slice


class TodoPatcher(ABC):

    def __init__(self, df: DataFrame, todo: StylerTodo):
        self._todo: StylerTodo = todo
        self._subset_data: DataFrame = df if df.empty else self._get_subset_data(df, todo.apply_args.subset)

    @abstractmethod
    def create_patched_todo(self, chunk: DataFrame) -> Optional[StylerTodo]:
        pass

    def _calculate_chunk_subset(self, chunk: DataFrame) -> Any:
        index_intersection = chunk.index.intersection(self._subset_data.index)
        column_intersection = chunk.columns.intersection(self._subset_data.columns)
        return index_intersection, column_intersection

    @staticmethod
    def _get_subset_data(df: DataFrame, subset: Optional[Any]) -> DataFrame:
        subset = slice(None) if subset is None else subset
        subset = non_reducing_slice(subset)
        return df.loc[subset]

from typing import Optional
from pandas import DataFrame


class ApplyMapPatcher(TodoPatcher):

    def __init__(self, df: DataFrame, todo: StylerTodo):
        super().__init__(df, todo)

    def create_patched_todo(self, chunk: DataFrame) -> Optional[StylerTodo]:
        return self._todo.builder() \
            .with_subset(self._calculate_chunk_subset(chunk)) \
            .build()

from typing import Optional, Union

from pandas import DataFrame, Series


class ApplyPatcher(TodoPatcher):

    def __init__(self, df: DataFrame, todo: StylerTodo):
        super().__init__(df, todo)

    def create_patched_todo(self, chunk: DataFrame) -> Optional[StylerTodo]:
        builder = self._todo.builder().with_subset(self._calculate_chunk_subset(chunk))
        if self._todo.should_provide_chunk_parent():
            builder.with_style_func(
                ChunkParentProvider(self._styling_func, self._todo.apply_args.axis, self._subset_data),
            )
        else:
            builder.with_style_func(self._styling_func)
        return builder.build()

    def _styling_func(self, chunk_or_series_from_chunk: Union[DataFrame, Series], **kwargs):
        if chunk_or_series_from_chunk.empty:
            return chunk_or_series_from_chunk
        return self._todo.apply_args.style_func(chunk_or_series_from_chunk, **kwargs)

from typing import Optional, Union

import numpy as np
from pandas import DataFrame, Series


class BackgroundGradientPatcher(TodoPatcher):

    def __init__(self, df: DataFrame, todo: StylerTodo):
        super().__init__(df, todo)

    def create_patched_todo(self, chunk: DataFrame) -> Optional[StylerTodo]:
        return self._todo.builder() \
            .with_subset(self._calculate_chunk_subset(chunk)) \
            .with_style_func(ChunkParentProvider(self._styling_func, self._todo.apply_args.axis, self._subset_data)) \
            .build()

    def _styling_func(self,
                      chunk_or_series_from_chunk: Union[DataFrame, Series],
                      chunk_parent: Union[DataFrame, Series],
                      **kwargs,
                      ):
        if chunk_or_series_from_chunk.empty:
            return chunk_or_series_from_chunk

        vmin = kwargs.get("vmin", None)
        vmax = kwargs.get("vmax", None)

        if vmin is None or vmax is None:
            n = chunk_parent.to_numpy()
            if vmin is None:
                vmin = np.nanmin(n)
            if vmax is None:
                vmax = np.nanmax(n)

        return self._todo.apply_args.style_func(
            chunk_or_series_from_chunk,
            **dict(kwargs, vmin=vmin, vmax=vmax),
        )

from typing import Callable, Optional, Union

from pandas import DataFrame, Series
from pandas._typing import Axis


class ChunkParentProvider:
    def __init__(self, style_func: Callable, axis: Optional[Axis], subset_data: DataFrame):
        self._style_func = style_func
        self._axis = axis
        self._subset_data = subset_data

    def __call__(self, chunk_or_series_from_chunk: Union[DataFrame, Series], *args, **kwargs):
        if chunk_or_series_from_chunk.empty:
            return chunk_or_series_from_chunk

        kwargs['chunk_parent'] = self._get_parent(chunk_or_series_from_chunk)
        return self._style_func(chunk_or_series_from_chunk, *args, **kwargs)

    def _get_parent(self, chunk_or_series_from_chunk: Union[DataFrame, Series]):
        if self._axis == 0 or self._axis == "index":
            return self._subset_data[chunk_or_series_from_chunk.name]
        elif self._axis == 1 or self._axis == "columns":
            return self._subset_data.loc[chunk_or_series_from_chunk.name]
        else:
            return self._subset_data

import numpy as np
from typing import Optional, Union
from pandas import DataFrame, Series


class HighlightExtremaPatcher(TodoPatcher):

    def __init__(self, df: DataFrame, todo: StylerTodo):
        super().__init__(df, todo)
        self._max: bool = todo.style_func_kwargs.get('max_', False)
        self._attribute: str = f"background-color: {todo.style_func_kwargs.get('color', 'yellow')}"

    def create_patched_todo(self, chunk: DataFrame) -> Optional[StylerTodo]:
        return self._todo.builder() \
            .with_subset(self._calculate_chunk_subset(chunk)) \
            .with_style_func_kwargs({}) \
            .with_style_func(ChunkParentProvider(self._styling_func, self._todo.apply_args.axis, self._subset_data)) \
            .build()

    def _styling_func(self,
                      chunk_or_series_from_chunk: Union[DataFrame, Series],
                      chunk_parent: Union[DataFrame, Series],
                      ):
        if chunk_or_series_from_chunk.empty:
            return chunk_or_series_from_chunk

        if self._max:
            extrema = chunk_or_series_from_chunk == np.nanmax(chunk_parent.to_numpy())
        else:
            extrema = chunk_or_series_from_chunk == np.nanmin(chunk_parent.to_numpy())

        if chunk_or_series_from_chunk.ndim == 1:
            return [self._attribute if v else "" for v in extrema]
        else:
            return DataFrame(
                np.where(extrema, self._attribute, ""),
                index=chunk_or_series_from_chunk.index,
                columns=chunk_or_series_from_chunk.columns
            )

from typing import Callable, List, Tuple, Optional

from pandas import DataFrame
from pandas.io.formats.style import Styler


class TodosPatcher:

    def patch_todos_for_chunk(self, source: Styler, chunk: DataFrame) -> List[Tuple[Callable, tuple, dict]]:
        result: List[Tuple[Callable, tuple, dict]] = []

        for t in source._todo:
            todo = StylerTodo.from_tuple(t)

            if todo.is_pandas_style_func():
                patcher = self.__get_patcher_for_pandas_style_function(source.data, todo)
            else:
                if todo.is_applymap():
                    patcher = ApplyMapPatcher(source.data, todo)
                else:
                    patcher = ApplyPatcher(source.data, todo)

            if patcher is not None:
                result.append(patcher.create_patched_todo(chunk).to_tuple())

        return result

    @staticmethod
    def is_style_function_supported(todo: StylerTodo) -> bool:
        if todo.is_pandas_style_func():
            return TodosPatcher.__get_patcher_for_pandas_style_function(DataFrame(), todo) is not None
        return True

    @staticmethod
    def __get_patcher_for_pandas_style_function(df: DataFrame, todo: StylerTodo) -> Optional[TodoPatcher]:
        qname = StyleFunctionNameResolver.get_style_func_qname(todo)
        if StyleFunctionNameResolver.is_pandas_background_gradient(qname):
            return BackgroundGradientPatcher(df, todo)
        elif StyleFunctionNameResolver.is_pandas_highlight_min(qname, todo):
            return HighlightExtremaPatcher(df, todo)
        elif StyleFunctionNameResolver.is_pandas_highlight_max(qname, todo):
            return HighlightExtremaPatcher(df, todo)
        elif StyleFunctionNameResolver.is_pandas_highlight_null(qname):
            return ApplyMapPatcher(df, todo)
        elif StyleFunctionNameResolver.is_pandas_set_properties(qname):
            return ApplyMapPatcher(df, todo)
        return None

from dataclasses import dataclass
from typing import List, Callable, Tuple
from collections.abc import Mapping
from abc import ABC, abstractmethod

from pandas import DataFrame
from pandas.io.formats.style import Styler


class _IndexTranslator(ABC):
    @abstractmethod
    def translate(self, index):
        pass


class _SequenceIndexTranslator(_IndexTranslator):
    def __init__(self, seq):
        super().__init__()
        self.__seq = seq

    def translate(self, index):
        return self.__seq[index]


class _OffsetIndexTranslator(_IndexTranslator):
    def __init__(self, offset: int):
        super().__init__()
        self.__offset = offset

    def translate(self, index):
        return index + self.__offset


class _TranslateKeysDict(Mapping):

    def __init__(self, org_dict: dict, translate_key: Callable):
        self._org_dict = org_dict
        self._translate_key = translate_key

    def get(self, key, default=None):
        t_key = self._translate_key(key)
        if t_key not in self._org_dict:
            return default
        return self._org_dict.get(t_key)

    def __contains__(self, key):
        return self._translate_key(key) in self._org_dict

    def __getitem__(self, key):
        return self._org_dict[self._translate_key(key)]

    def values(self):
        return super().values()

    def __iter__(self):
        raise NotImplementedError

    def keys(self):
        raise NotImplementedError

    def items(self):
        raise NotImplementedError

    def __len__(self):
        return len(self._org_dict)


class _HTMLPropsIndexAdjuster:

    def __init__(self, ri_translator: _IndexTranslator, ci_translator: _IndexTranslator):
        self.ri_translator = ri_translator
        self.ci_translator = ci_translator

    def adjust(self, html_props: dict):
        for head in html_props.get('head', []):
            for entry in head:
                self.adjust_id_and_class(entry)

        for row in html_props.get('body', []):
            for entry in row:
                self.adjust_id_and_class(entry)

        for style in html_props.get('cellstyle', []):
            if 'selectors' in style:
                style['selectors'] = ['_'.join(self._adjust_row_col_indices(s.split('_'))) for s in style['selectors']]

    def adjust_id_and_class(self, entry: dict):
        if 'id' in entry:
            entry['id'] = '_'.join(self._adjust_row_col_indices(entry['id'].split('_')))
        if 'class' in entry:
            entry['class'] = ' '.join(self._adjust_row_col_indices(entry['class'].strip().split(' ')))

    def _adjust_row_col_indices(self, indices: List[str]) -> List[str]:
        return [self._adjust_row_col_index(x) for x in indices]

    def _adjust_row_col_index(self, index: str) -> str:
        if index.startswith("row") and index[3:].isdigit():
            return f'row{self.ri_translator.translate(int(index[3:]))}'
        if index.startswith("col") and index[3:].isdigit():
            return f'col{self.ci_translator.translate(int(index[3:]))}'
        return index


@dataclass(frozen=True)
class Region:
    first_row: int = 0
    first_col: int = 0
    rows: int = 0
    cols: int = 0

    def is_empty(self) -> bool:
        return self.rows == 0 or self.cols == 0

    def is_valid(self) -> bool:
        return self.first_row >= 0 and self.first_col >= 0 and self.rows >= 0 and self.cols >= 0


class HTMLPropsGenerator:
    def __init__(self, visible_data: DataFrame, styler: Styler):
        self.__visible_data: DataFrame = visible_data
        self.__styler: Styler = styler

    def generate_props_unpatched(self) -> dict:
        copy = self.__styler
        copy.uuid = ''
        copy.uuid_len = 0
        copy.cell_ids = False

        copy.ctx.clear()

        copy._compute()

        return copy._translate()

    def generate_props_for_chunk(self,
                                 region: Region,
                                 exclude_row_header: bool = False,
                                 translate_indices: bool = True,
                                 ) -> dict:
        chunk = self.__visible_data.iloc[
                region.first_row: region.first_row + region.rows,
                region.first_col: region.first_col + region.cols,
                ]

        patched_todos = TodosPatcher().patch_todos_for_chunk(self.__styler, chunk)

        computed_styler = self.__compute_styles(
            patched_todos=patched_todos,
            exclude_row_header=exclude_row_header,
        )

        rit = _OffsetIndexTranslator(region.first_row)

        if len(self.__styler.hidden_columns) == 0:
            cit = _OffsetIndexTranslator(region.first_col)
        else:
            cit = _SequenceIndexTranslator(self.__styler.columns.get_indexer_for(chunk.columns))

        chunk_styler = chunk.style
        self.__copy_styler_state(source=computed_styler, target=chunk_styler)

        def translate_key(k):
            return rit.translate(k[0]), cit.translate(k[1])

        chunk_styler.ctx = _TranslateKeysDict(computed_styler.ctx, translate_key)
        chunk_styler._display_funcs = _TranslateKeysDict(computed_styler._display_funcs, translate_key)
        self.__copy_over_cell_context(source=computed_styler, target=chunk_styler, ri_translator=rit, ci_translator=cit)

        result = chunk_styler._translate()
        trimmed = [x for x in result["cellstyle"] if any(any(y) for y in x["props"])]
        result["cellstyle"] = trimmed

        if translate_indices:
            _HTMLPropsIndexAdjuster(rit, cit).adjust(result)

        return result

    @staticmethod
    def __copy_over_cell_context(
            source: Styler,
            target: Styler,
            ri_translator: _IndexTranslator,
            ci_translator: _IndexTranslator,
    ):
        if source.cell_context is not None and "data" in source.cell_context:

            source_data = source.cell_context["data"]
            target_data = {}

            def translate_column_key(k):
                return ci_translator.translate(k)

            for source_row_key, source_row in source_data.items():
                if len(source_row) > 0:
                    target_data[source_row_key] = _TranslateKeysDict(source_row, translate_column_key)

            target.cell_context = {"data": _TranslateKeysDict(target_data, lambda k: ri_translator.translate(k))}

    def __compute_styles(self,
                         patched_todos: List[Tuple[Callable, tuple, dict]],
                         exclude_row_header: bool = False,
                         ) -> Styler:
        copy = self.__styler.data.style
        self.__copy_styler_state(source=self.__styler, target=copy)

        copy._todo = patched_todos

        if exclude_row_header:
            copy.hide_index()

        copy._compute()
        return copy

    @staticmethod
    def __copy_styler_state(source: Styler, target: Styler):
        target.uuid = ''
        target.uuid_len = 0
        target.cell_ids = False

        target.table_styles = source.table_styles
        target.table_attributes = source.table_attributes
        target.hidden_index = source.hidden_index
        target.cell_context = source.cell_context
        target._display_funcs = source._display_funcs

from dataclasses import dataclass
from typing import List, Dict
import json

from pandas import DataFrame
from pandas.io.formats.style import Styler


@dataclass
class _TableElement:
    type: str
    display_value: str
    is_heading: bool
    css: dict
    attributes: List[str]


@dataclass
class _Table:
    body: List[List[_TableElement]]
    head: List[List[_TableElement]]


@dataclass
class _SpannedElement:
    row_span: int
    col_span: int
    element: _TableElement


@dataclass(frozen=True)
class HTMLPropsValidationResult:
    actual: str
    expected: str
    is_equal: bool


class HTMLPropsValidator:
    def __init__(self, visible_data: DataFrame, styler: Styler):
        self.__html_props_generator: HTMLPropsGenerator = HTMLPropsGenerator(visible_data, styler)
        self.__visible_region = Region(0, 0, len(visible_data.index), len(visible_data.columns))

    def validate(self, rows_per_chunk: int, cols_per_chunk: int) -> HTMLPropsValidationResult:
        return self.validate_region(self.__visible_region, rows_per_chunk, cols_per_chunk)

    def validate_region(self,
                        region: Region,
                        rows_per_chunk: int,
                        cols_per_chunk: int,
                        ) -> HTMLPropsValidationResult:
        clamped_region = self.__compute_clamped_region(region)
        if clamped_region.is_empty():
            return HTMLPropsValidationResult('', '', True)

        combined_table = self.__create_combined_table_from_chunks(clamped_region, rows_per_chunk, cols_per_chunk)
        expected_table = self.__create_expected_table(clamped_region)
        combined_json = self.__jsonify_html_props(combined_table)
        expected_json = self.__jsonify_html_props(expected_table)

        return HTMLPropsValidationResult(combined_json, expected_json, combined_json == expected_json)

    def __compute_clamped_region(self, region: Region) -> Region:
        if region.is_empty():
            return region
        if self.__visible_region.is_empty():
            return self.__visible_region
        assert region.is_valid()
        first_row = min(region.first_row, self.__visible_region.rows - 1)
        first_col = min(region.first_col, self.__visible_region.cols - 1)
        rows_left = self.__visible_region.rows - (first_row if first_row == 0 else first_row + 1)
        cols_left = self.__visible_region.cols - (first_col if first_col == 0 else first_col + 1)
        rows = min(region.rows, rows_left)
        cols = min(region.cols, cols_left)
        return Region(first_row, first_col, rows, cols)

    def __create_expected_table(self, region: Region) -> _Table:
        if region == self.__visible_region:
            html_props = self.__html_props_generator.generate_props_unpatched()
        else:
            html_props = self.__html_props_generator.generate_props_for_chunk(
                region=region,
                translate_indices=False,
            )
        table: _Table = _Table([], [])
        self.__append_to_table(
            table=table,
            html_props=html_props,
            target_row_offset=0,
            is_part_of_first_rows_in_chunk=True,
            is_part_of_first_cols_in_chunk=True,
        )
        return table

    def __create_combined_table_from_chunks(self, region: Region, rows_per_chunk: int, cols_per_chunk: int):
        table: _Table = _Table([], [])

        rows_processed = 0
        while rows_processed < region.rows:
            rows = min(rows_per_chunk, region.rows - rows_processed)
            cols_in_row_processed = 0
            while cols_in_row_processed < region.cols:
                cols = min(cols_per_chunk, region.cols - cols_in_row_processed)
                chunk_html_props = self.__html_props_generator.generate_props_for_chunk(
                    region=Region(
                        region.first_row + rows_processed,
                        region.first_col + cols_in_row_processed,
                        rows,
                        cols,
                    ),
                    exclude_row_header=cols_in_row_processed > 0,
                    translate_indices=False,
                )

                self.__append_to_table(
                    table=table,
                    html_props=chunk_html_props,
                    target_row_offset=rows_processed,
                    is_part_of_first_rows_in_chunk=rows_processed == 0,
                    is_part_of_first_cols_in_chunk=cols_in_row_processed == 0,
                )

                cols_in_row_processed += cols
            rows_processed += rows

        return table

    @staticmethod
    def __jsonify_html_props(html_props: _Table) -> str:
        return json.dumps(html_props, indent=2, cls=CustomJSONEncoder)

    def __transform_rows(self, rows: List[List[dict]], css_dict: Dict[str, str]) -> List[List[_TableElement]]:
        transformed_rows: List[List[_TableElement]] = []
        open_spans: Dict[int, List[_SpannedElement]] = {}
        css_dict_is_empty = len(css_dict) == 0

        for row in rows:

            transformed_row = []
            ignore_trailing_blank_row_headers = False

            for ci, element in enumerate(row):

                element_to_add = None
                element_type = element.get("type", "")
                element_classes = set(element.get("class", []).split(" "))
                is_header = element_type == "th"

                if ignore_trailing_blank_row_headers:
                    if is_header and "blank" in element_classes:
                        continue
                else:
                    ignore_trailing_blank_row_headers = is_header and "blank" not in element_classes

                if element.get("is_visible", True):
                    transformed_css = {"id": css_dict.get(element.get("id", None), None), "class": []}
                    if not css_dict_is_empty:
                        for c in element_classes:
                            css = css_dict.get(c, None)
                            if css is not None:
                                transformed_css["class"].append(css)

                    transformed_element = _TableElement(
                        type=element_type,
                        display_value=str(element.get("display_value", "")),
                        is_heading=is_header and ("col_heading" in element_classes or "row_heading" in element_classes),
                        css=transformed_css,
                        attributes=element.get("attributes", []),
                    )
                    element_to_add = transformed_element

                    attributes = transformed_element.attributes
                    if attributes is not None:
                        row_span = self.__get_and_remove_span_value(attributes, "rowspan")
                        col_span = self.__get_and_remove_span_value(attributes, "colspan")
                        if row_span > 1 or col_span > 1:
                            element_to_add = None
                            open_spans.setdefault(ci, []).append(
                                _SpannedElement(row_span, col_span, transformed_element),
                            )

                if ci in open_spans:
                    pending_col_spans = open_spans[ci]
                    remove_consumed_spans = False
                    for pending_span in pending_col_spans:
                        transformed_row.extend(pending_span.col_span * [pending_span.element])
                        pending_span.row_span -= 1
                        if pending_span.row_span < 1:
                            remove_consumed_spans = True

                    if remove_consumed_spans:
                        cleaned = [s for s in pending_col_spans if s.row_span > 0]
                        if len(cleaned) == 0:
                            del open_spans[ci]
                        else:
                            open_spans[ci] = cleaned

                if element_to_add is not None:
                    transformed_row.append(element_to_add)

            if len(transformed_row) > 0:
                transformed_rows.append(transformed_row)

        assert len(open_spans) == 0, f"Found {len(open_spans)} non processed open spans"
        return transformed_rows

    @staticmethod
    def __get_and_remove_span_value(attributes: List[str], span_name: str) -> int:
        span = next((x for x in attributes if x.startswith(f"{span_name}=")), None)
        if span is None:
            return 1
        attributes.remove(span)
        return int(span.split("=")[1].strip('"'))

    def __append_to_table(self,
                          table: _Table,
                          html_props: dict,
                          target_row_offset: int,
                          is_part_of_first_rows_in_chunk: bool,
                          is_part_of_first_cols_in_chunk: bool,
                          ):
        cellstyle = html_props.get("cellstyle", None)
        css_dict = {}
        if cellstyle is not None:
            for entry in cellstyle:
                if len(entry["props"]) == 0:
                    continue
                for s in entry.get('selectors', []):
                    css_dict[s] = entry['props']

        if is_part_of_first_rows_in_chunk:
            self.__append_head_elements(
                table,
                html_props.get("head", []),
                css_dict,
            )

        self.__append_body_elements(
            table,
            html_props.get("body", []),
            target_row_offset,
            is_part_of_first_cols_in_chunk,
            css_dict,
        )

    def __append_head_elements(self, table: _Table, head_elements: list, css_dict: dict):
        transformed_head_elements = self.__transform_rows(head_elements, css_dict)
        if len(table.head) == 0:
            table.head.extend(transformed_head_elements)
        else:
            for i, row in enumerate(transformed_head_elements):
                for element in row:
                    if element.is_heading:
                        table.head[i].append(element)

    def __append_body_elements(self,
                               table: _Table,
                               body_elements: list,
                               target_row_offset: int,
                               is_part_of_first_cols_in_chunk: bool,
                               css_dict: dict,
                               ):
        transformed_body_elements = self.__transform_rows(body_elements, css_dict)
        if is_part_of_first_cols_in_chunk:
            table.body.extend(transformed_body_elements)
        else:
            for i, row in enumerate(transformed_body_elements):
                target_row = table.body[target_row_offset + i]
                for j, entry in enumerate(row):
                    if 'td' == entry.type:
                        target_row.extend(row[j:])
                        break

from dataclasses import dataclass
from enum import Enum
from typing import List, Tuple
from abc import ABC, abstractmethod
from pandas import DataFrame
from pandas.io.formats.style import Styler


@dataclass(frozen=True)
class StyleFunctionValidationProblem:
    index: int
    reason: str
    message: str = ""


class ValidationStrategyType(Enum):
    FAST = "fast"
    PRECISION = "precision"


class _AbstractValidationStrategy(ABC):
    def __init__(self, strategy_type: ValidationStrategyType):
        self._strategy_type: ValidationStrategyType = strategy_type

    @property
    def strategy_type(self):
        return self._strategy_type

    @abstractmethod
    def get_chunk_size(self, rows_in_region: int, columns_in_region: int) -> Tuple[int, int]:
        pass

    @staticmethod
    def _ceiling_division(n, d):
        return -(n // -d)


class _PrecisionValidationStrategy(_AbstractValidationStrategy):
    def __init__(self):
        super().__init__(ValidationStrategyType.PRECISION)

    def get_chunk_size(self, rows_in_region: int, columns_in_region: int) -> Tuple[int, int]:
        cols_per_chunk = max(1, self._ceiling_division(rows_in_region, 2))
        rows_per_chunk = max(1, self._ceiling_division(columns_in_region, 2))
        return rows_per_chunk, cols_per_chunk


class _FastValidationStrategy(_AbstractValidationStrategy):
    def __init__(self):
        super().__init__(ValidationStrategyType.FAST)
        self.__split_vertical = True

    def get_chunk_size(self, rows_in_region: int, columns_in_region: int) -> Tuple[int, int]:
        rows_per_chunk = rows_in_region
        cols_per_chunk = columns_in_region

        if self.__split_vertical:
            cols_per_chunk = max(1, self._ceiling_division(cols_per_chunk, 2))
        else:
            rows_per_chunk = max(1, self._ceiling_division(rows_per_chunk, 2))

        self.__split_vertical = not self.__split_vertical
        return rows_per_chunk, cols_per_chunk


class StyleFunctionsValidator:
    def __init__(self, visible_data: DataFrame, styler: Styler):
        self.__visible_data: DataFrame = visible_data
        self.__styler: Styler = styler
        self.__validation_strategy: _AbstractValidationStrategy = _FastValidationStrategy()

    def set_validation_strategy_type(self, strategy_type: ValidationStrategyType):
        if self.__validation_strategy.strategy_type is strategy_type:
            return
        if strategy_type is ValidationStrategyType.FAST:
            self.__validation_strategy = _FastValidationStrategy()
        else:
            self.__validation_strategy = _PrecisionValidationStrategy()

    def validate(self, region: Region) -> List[StyleFunctionValidationProblem]:

        if not self.__has_apply_calls():
            return []

        rows_per_chunk, cols_per_chunk = self.__validation_strategy.get_chunk_size(region.rows, region.cols)

        if len(self.__styler._todo) == 1:
            return self.__validate_single_todos(region, rows_per_chunk, cols_per_chunk)

        try:
            validator = HTMLPropsValidator(self.__visible_data, self.__styler)
            if validator.validate_region(region, rows_per_chunk, cols_per_chunk).is_equal:
                return []
        except Exception:
            pass

        return self.__validate_single_todos(region, rows_per_chunk, cols_per_chunk)

    def __validate_single_todos(self,
                                region: Region,
                                rows_per_chunk: int,
                                cols_per_chunk: int,
                                ) -> List[StyleFunctionValidationProblem]:
        validation_result = []

        org_todo = self.__styler._todo
        try:
            for i, todo in enumerate(org_todo):
                try:
                    if StylerTodo.is_applymap_tuple(todo):
                        continue
                    self.__styler._todo = [todo]
                    validator = HTMLPropsValidator(self.__visible_data, self.__styler)
                    result = validator.validate_region(region, rows_per_chunk, cols_per_chunk)
                    if not result.is_equal:
                        validation_result.append(StyleFunctionValidationProblem(i, "NOT_EQUAL"))
                except Exception as e:
                    validation_result.append(StyleFunctionValidationProblem(i, "EXCEPTION", str(e)))
        finally:
            self.__styler._todo = org_todo

        return validation_result

    def __has_apply_calls(self) -> bool:
        todos = self.__styler._todo
        if len(todos) == 0:
            return False
        return any(not StylerTodo.is_applymap_tuple(t) for t in todos)

import json
from dataclasses import dataclass
from typing import Optional, List, Any
import numpy as np
from pandas import DataFrame
from pandas.io.formats.style import Styler


@dataclass(frozen=True)
class TableStructure:
    rows_count: int
    columns_count: int
    row_levels_count: int
    column_levels_count: int
    hide_row_header: bool
    hide_column_header: bool = False


@dataclass(frozen=True)
class StyleFunctionDetails:
    index: int
    qname: str
    resolved_name: str
    axis: str
    is_chunk_parent_requested: bool
    is_apply: bool
    is_pandas_builtin: bool
    is_supported: bool


class PatchedStyler:

    def __init__(self, styler: Styler):
        self.__styler: Styler = styler
        self.__visible_data: DataFrame = self.__get_visible_data(styler)
        self.__html_props_generator = HTMLPropsGenerator(self.__get_visible_data(styler), styler)
        self.__style_functions_validator = StyleFunctionsValidator(self.__get_visible_data(styler), styler)

    @staticmethod
    def to_json(data: Any) -> str:
        return json.dumps(data, cls=CustomJSONEncoder)

    def create_html_props_validator(self) -> HTMLPropsValidator:
        return HTMLPropsValidator(self.__visible_data, self.__styler)

    def validate_style_functions(self,
                                 first_row: int,
                                 first_col: int,
                                 rows: int,
                                 cols: int,
                                 validation_strategy: Optional[ValidationStrategyType] = None,
                                 ) -> List[StyleFunctionValidationProblem]:
        if validation_strategy is not None:
            self.__style_functions_validator.set_validation_strategy_type(validation_strategy)
        return self.__style_functions_validator.validate(Region(first_row, first_col, rows, cols))

    def render_chunk(self,
                     first_row: int,
                     first_col: int,
                     rows: int,
                     cols: int,
                     exclude_row_header: bool = False,
                     exclude_col_header: bool = False,  # unused in this version
                     ) -> str:
        html_props = self.__html_props_generator.generate_props_for_chunk(
            region=Region(first_row, first_col, rows, cols),
            exclude_row_header=exclude_row_header,
        )
        return self.__styler.template.render(
            **html_props,
            encoding="utf-8",
            sparse_columns=False,
            sparse_index=False,
        )

    def render_unpatched(self) -> str:
        self.__styler.uuid = ''
        self.__styler.uuid_len = 0
        self.__styler.cell_ids = False
        return self.__styler.render(
            encoding="utf-8",
            sparse_columns=False,
            sparse_index=False,
        )

    def get_table_structure(self) -> TableStructure:
        rows_count = len(self.__visible_data.index)
        columns_count = len(self.__visible_data.columns)
        if rows_count == 0 or columns_count == 0:
            rows_count = columns_count = 0
        return TableStructure(
            rows_count=rows_count,
            columns_count=columns_count,
            row_levels_count=self.__visible_data.index.nlevels,
            column_levels_count=self.__visible_data.columns.nlevels,
            hide_row_header=self.__styler.hidden_index,
        )

    def get_style_function_details(self) -> List[StyleFunctionDetails]:
        result = []

        for i, todo in enumerate(self.__styler._todo):
            t = StylerTodo.from_tuple(todo)
            result.append(StyleFunctionDetails(
                index=i,
                qname=StyleFunctionNameResolver.get_style_func_qname(t),
                resolved_name=StyleFunctionNameResolver.resolve_style_func_name(t),
                axis='' if t.is_applymap() else str(t.apply_args.axis),
                is_pandas_builtin=t.is_pandas_style_func(),
                is_supported=TodosPatcher.is_style_function_supported(t),
                is_apply=not t.is_applymap(),
                is_chunk_parent_requested=t.should_provide_chunk_parent(),
            ))

        return result

    @staticmethod
    def __get_visible_data(styler: Styler) -> DataFrame:
        if len(styler.hidden_columns) == 0:
            return styler.data
        else:
            visible_columns = np.delete(styler.columns.get_indexer_for(styler.columns), styler.hidden_columns)
            return styler.data.iloc[:, visible_columns]

from typing import Union

from pandas import DataFrame
from pandas.io.formats.style import Styler




class StyledDataFrameViewerBridge:
    patched_styler_refs = []

    @classmethod
    def create_patched_styler(cls, frame_or_styler: Union[DataFrame, Styler]) -> PatchedStyler:
        p = PatchedStyler(frame_or_styler.style) if isinstance(frame_or_styler, DataFrame) else PatchedStyler(
            frame_or_styler)
        cls.patched_styler_refs.append(p)
        return p

    @classmethod
    def delete_patched_styler(cls, patched_styler: PatchedStyler):
        cls.patched_styler_refs.remove(patched_styler)

    @classmethod
    def delete_all(cls):
        cls.patched_styler_refs.clear()

    @staticmethod
    def check() -> bool:
        return True
